package org.utd.network_packet_discovery;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.io.EOFException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeoutException;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.EmptyBorder;
import javax.swing.JScrollPane;

import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PcapNativeException;
import org.utd.network_packet_discovery.util.NetworkScanner;

public class Main extends javax.swing.JFrame {
 
	private JPanel contentPane;
	private JTextField textField;
	private JComboBox comboBox;
	private JSpinner spinner;
	private JTextArea textArea;
	private JButton btnStartScan;
	
	NetworkThread threadRunner;
    /**
     * Creates new form Main
     */
	NetworkScanner scanner;
	
    public static void main(String args[]) {
    	try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    	
    	EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Main m = new Main();
					m.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});

    }
    
    public Main() {
        initComponents();
       
        //Set up combo box
        List<String> interfaces = new ArrayList<String>();
        for(InetAddress inter : NetworkScanner.getInterfaces()) {
            interfaces.add(inter.getHostAddress());
        }
        comboBox.setModel(new DefaultComboBoxModel(interfaces.toArray()));
       
        //Set default IP
        textField.setText("10.176.138.16");
       
        spinner.setValue(5);

    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    	setTitle("Network Packet Discovery");
    	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 525, 314);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		
		JLabel lblNewLabel = new JLabel("Network Interface");
		
		comboBox = new JComboBox();
		
		JLabel lblNewLabel_1 = new JLabel("Target IP");
		
		JLabel lblNewLabel_2 = new JLabel("Max Packets");
		
		textField = new JTextField();
		textField.setColumns(10);
		
		spinner = new JSpinner();
	
		comboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Item 1" }));
		
		btnStartScan = new JButton("Start Scan");
		btnStartScan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
		
		JScrollPane scrollPane = new JScrollPane();
		GroupLayout gl_contentPane = new GroupLayout(contentPane);
		gl_contentPane.setHorizontalGroup(
				gl_contentPane.createParallelGroup(Alignment.LEADING)
					.addGroup(gl_contentPane.createSequentialGroup()
						.addContainerGap()
						.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_contentPane.createSequentialGroup()
								.addGroup(gl_contentPane.createParallelGroup(Alignment.TRAILING)
									.addComponent(lblNewLabel_1)
									.addComponent(lblNewLabel)
									.addComponent(lblNewLabel_2))
								.addPreferredGap(ComponentPlacement.UNRELATED)
								.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
									.addComponent(comboBox, 0, 100, Short.MAX_VALUE)
									.addComponent(textField)
									.addComponent(spinner, GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)))
							.addGroup(gl_contentPane.createSequentialGroup()
								.addGap(61)
								.addComponent(btnStartScan)))
						.addGap(47)
						.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 234, GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
			);
			gl_contentPane.setVerticalGroup(
				gl_contentPane.createParallelGroup(Alignment.TRAILING)
					.addGroup(gl_contentPane.createSequentialGroup()
						.addGroup(gl_contentPane.createParallelGroup(Alignment.LEADING)
							.addGroup(gl_contentPane.createSequentialGroup()
								.addGap(69)
								.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
									.addComponent(lblNewLabel)
									.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(ComponentPlacement.RELATED)
								.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
									.addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
									.addComponent(lblNewLabel_1))
								.addPreferredGap(ComponentPlacement.RELATED)
								.addGroup(gl_contentPane.createParallelGroup(Alignment.BASELINE)
									.addComponent(spinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
									.addComponent(lblNewLabel_2))
								.addGap(18)
								.addComponent(btnStartScan))
							.addGroup(gl_contentPane.createSequentialGroup()
								.addGap(31)
								.addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 208, GroupLayout.PREFERRED_SIZE)))
						.addContainerGap(26, Short.MAX_VALUE))
			);
		
		textArea = new JTextArea();
		textArea.setEditable(false);
		textArea.setLineWrap(true);
		
		scrollPane.setViewportView(textArea);
		contentPane.setLayout(gl_contentPane);
    }                      
 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                        
       
        if(btnStartScan.getText().equals("Start Scan")){
        	System.out.println("Starting Scan");
            //Get Network Interface
            String networkInterface = comboBox.getSelectedItem().toString();
 
            //Get Target IP
            String targetIP = textField.getText();
 
            //Get max packets
            int maxPackets = (Integer)spinner.getValue();
           
            if(!networkInterface.equals("") && maxPackets > 0){
                //Accepts the interface selected (IP format), the IP it wishes to read from, and the max packets to scan
                scanner = new NetworkScanner(networkInterface, targetIP, maxPackets);
                   
                threadRunner = new NetworkThread(scanner);
                Thread t = new Thread(threadRunner);
                t.start();
                
                UpdateThread updateRunner = new UpdateThread();
                Thread update = new Thread(updateRunner);
                update.start();
                
                btnStartScan.setText("Stop Scan");
            }
        }
        else if(btnStartScan.getText().equals("Stop Scan")){
        	threadRunner.scanner.stopNetworkScan();
        	
        	textArea.setText(null);
            btnStartScan.setText("Start Scan");
        }
       
    }                                        
                              
 
    public class NetworkThread implements Runnable {
    	NetworkScanner scanner;
    	
        public NetworkThread(NetworkScanner scanner) {
        	this.scanner = scanner;
        }

        public void run() {
            scanner.scanNetwork();
            
            btnStartScan.setText("Start Scan");
        }
    }
    
    public class UpdateThread implements Runnable {
    	
        public UpdateThread() {
        }

        public void run() {
            while(true) {
            	if(!scanner.outputQueue.isEmpty()) {
            		 textArea.append(scanner.outputQueue.poll() + "\n");
            		 
            		 textArea.setCaretPosition(textArea.getDocument().getLength());
            	}
            }
        }
    }
    
}
